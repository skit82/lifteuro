@use 'sass:math';
// Основная сетка
// Colors

:root {
--white: #ffffff;
--monza: #d50032;
--mirage: #131825;
--ebony: #0f172a;
--gray-nickel: #b4b4b3;
--ebony-clay: #233239;
--gray-chateau: #9fa5ad;
--desert-storm: #ececeb;
}

// ---------------------------------

// Default

$color-default-black:               #000000;
$color-default-white:               #ffffff;
$color-transparent:                 rgba(255, 255, 255, 0);
$color-accent-main:                 #2c39f2;
$color-accent-second:               #212121;
$color-monza:                       #d50032;
$color-mirage:                      #131825;
$color-ebony:                       #0f172a;
$color-gray-nicrel:                 #b4b4b3;
$color-ebony-clay:                  #233239;
$color-gray-chateau:                #9fa5ad;
$color-gray-chateau-1:              #777d85;
$color-desert-storm:                #ececeb;

// Project palette
// для нейминга цветов используем https://www.htmlcsscolor.com/hex/334482

$color-neon-blue:                   #2c39f2;
$color-torch-red:                   #ff1553;

// Gradient

$black-to-right:                    linear-gradient(90deg, rgba(0, 0, 0, 0.75) 0%, rgba(0, 0, 0, 0) 75%);

// Typography
// ---------------------------------

// переменная используемая в html для подключения скейлинга
$fz-default:                        16px;

// у некоторых шрифтов в ios возникают проблемы с символом рубля
// https://www.artlebedev.ru/kovodstvo/sections/159/#13
$ff-rouble:                         "Rouble", "Arial", sans-serif;

$ff-commons-pro:                    "TT-Commons-Pro", "Arial", sans-serif;

// Animation
// ---------------------------------

$tf-default:                        ease;
$trans-default:                     0.3s $tf-default;
$trans-font:                        0.8s $tf-default;

// если требуется изинг отличный от $tf-default, то переменную называем не цифрой
$trans-modal:                       0.6s cubic-bezier(0.55, 0, 0.1, 1);

$trans-600:                         0.6s $tf-default;


// Минимальная ширина страницы
$minWidth: 320;
// Ширина полотна (макета)
$maxWidth: 1920;
// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1290;
// Общее отступление у контейнера
// (30 = по 15px слева и справа, 0 = нет отступления)
$containerPadding: 150;

// Максимальная ширина контейнера с отступами
$containerWidth: $maxWidthContainer + $containerPadding;

// Брейк-поинты
$pc: 1449.98 + px; // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$custom1: 1224 + px;
$tablet: 991.98 + px; // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: 767.98 + px; // Телефоны L
$mobileSmall: 479.98 + px; // Телефоны S

// Тип адаптива:
// 1 = отзывчивость (у контейнера нет брейкпоинтов),
// 2 = по брейк-поинту (контейнер меняет свою ширину по брейк-поинту)
$responsiveType: 1;

@if ($responsiveType==1) {
  .container {
    max-width: $containerWidth + px;
    margin: 0 auto;
    padding: 0 75px;
    @media (max-width:$tablet){
            padding: 0 35px;
        }
        @media (max-width:$mobile){
            padding: 0 25px;
        }
  }
} @else {
  // Брейк-поинты
  .container {
    margin: 0 auto;
    max-width: $containerWidth + px;
    padding: 0 math.div($containerPadding, 2) + px;

    @media (max-width: $pc) {
      max-width: 1200px;
    }
    @media (max-width: $tablet) {
      max-width: 970px;
    }
    @media (max-width: $mobile) {
      max-width: 740px;
    }
    @media (max-width: $mobileSmall) {
      max-width: none;
    }
  }
}

@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $keepSize: 0,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  $widthFromMedia: $widthFrom + px;
  $widthToMedia: $widthTo + px;

  // Формула плавного значення
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{$yIntersection + px}' + ' #{$slope * 100}vw;

  $propertyValue: #{'clamp(' $minSize + px ',' $flyValue ',' $startSize + px ')'};
  @if ($minSize > $startSize) {
    $propertyValue: #{'clamp('
      $startSize +
      px
      ','
      $flyValue
      ','
      $minSize +
      px
      ')'};
  }

  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: $startSize + px;
    }
  }
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }

    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * (100vw - #{$widthTo + px}) / #{math.div(
            $widthFrom,
            16
          ) - math.div($widthTo, 16)}
      );
    }
  }
  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: $minSize + px;
    }
  }
}

@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}

// Viewports
// ---------------------------------

$vp-320:                            320px;
$vp-375:                            375px;
$vp-500:                            500px;
$vp-768:                            768px;
$vp-1024:                           1024px;
$vp-1100:                           1100px;
$vp-1280:                           1280px;
$vp-1440:                           1440px;
$vp-1920:                           1920px;

// Retina
// ---------------------------------


$retina-dpi:                        144dpi;
$retina-dppx:                       1.5dppx;
